
Шаги для старта сервиса:
1. Распаковать папку.
2. Сделать права на запись для папки public.
3. Выполнить команду docker-compose build внутри распакованной папки.
4. Выполнить команду docker-compose up внутри распакованной папки.

Шаги для старта сервиса если исходный код на гит хабе:
1. Установить композер https://getcomposer.org/download/.
2. Клонировать https://github.com/zheka-13/devbox
3. В папке выполнить composer install
4. Выполнить команду docker-compose build внутри распакованной папки.
5. Выполнить команду docker-compose up внутри распакованной папки.

Шаги для запуска тестов:
1. Выполнить команду: docker exec devbox vendor/bin/phpunit (где devbox - название контейнера)

Сервис и методология:
Для сервиса выбран язык РНР и фреймворк Lumen. Такой выбор сделан потому что этот язык я знаю лучше всего.

В архиве весь фреймворк с кодом и
библиотеками(которые занимаю 90 процентов веса, не разобрался как composer install сделать в докере при билде), но в 10 МБ влезло.


Сервис предтавляет собой апи по адресу http://127.0.0.1:8080/api/simple_box, которое должно делать,
то что указано в задании.
По адресу http://127.0.0.1:8080 доступна демо страница с визуализацией порезки листа.
Алгоритм размещения раскроек на листе достаточно простой.
Делается проход по всем координатам листа с попыткой разместить форму раскройки
с условием, что она не должна перекрывать уже размещенные раскройки и не выходить за лимиты листа.
Реализован поворот на 90 градусов раскройки и проверка всех положений для оптимального размещения.
Шаг прохода по осям  - равен минимальной длине ребра коробки (в противном случае будет тормозить даже на средних объемах).


На что обратить внимание.
Методология и язык выбраны потому что я их лучше остальных знаю. Но скорее всего такие вещи лучше будут
работать на других языках, тот же go например. Никто не мешает переписать.
Оптимизация и скорость работы оставляет желать лучшего, поэтому все еще остается куча возможностей для нее.
Например, оптимизировать проход, что бы не проверять заведомо занятое место на листе.
Можно уйти от ООП в функции - скорость вырастет, ресурсов надо будет меньше, код станет менее понятным.
Оптимизировать порезку, отсортировать и выстроить путь резака с минимальным количеством переходов без порезки между точками.
Оптимизация уменьшения отходов тут тоже требует доработки ибо поиск расположения заключается в простом вращении раскройки.
Хотя, если отталкиваться от реальных  требований, где не будет листов 10000х10000 и коробочек со стороной по 10мм,
то в общемто быстродействие кое как прокатит.











